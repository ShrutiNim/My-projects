# import pandas as pd
# import os
# import numpy as np
# import matplotlib.pyplot as plt

# path_of_file = r"C:\Users\hp\Downloads\WRK.US_H1_txt.txt"
# df = pd.read_csv(path_of_file, delimiter=',', usecols=['datetime', 'open', 'close', 'low', 'high'])
# print(df.head())

# df=df.sort_values('datetime')

# plt.figure(figsize=(18,9))
# plt.plot(range(df.shape[0]),df['open'])
# plt.xticks(range(0,df.shape[0],500),df['datetime'].loc[::500],rotation=45)
# plt.xlabel('Date',fontsize=20)
# plt.ylabel('Open price',fontsize=20)
# plt.show()

# D=df.iloc[:,1:2].values

# Tr_set=D[:10000]
# Ts_set=D[10000:]


# from sklearn.preprocessing import MinMaxScaler
# import tensorflow as tf
# from tensorflow.keras.models import Sequential
# from tensorflow.keras.layers import Dense
# from tensorflow.keras.layers import LSTM
# from tensorflow.keras.layers import Dropout


# sc=MinMaxScaler(feature_range=(0,1))


# Tr_scaled=sc.fit_transform(Tr_set)
# Ts_scaled=sc.transform(Ts_set)


# seq_len=100
# X_train=[]
# y_train=[]
# for i in range(seq_len,len(Tr_scaled)-seq_len):
#     X_train.append(Tr_scaled[i-seq_len:i,0])
#     y_train.append(Tr_scaled[i,0])



# type(X_train)

# X_train,y_train=np.array(X_train),np.array(y_train)

# X_train[0]

# X_test=[]
# y_test=[]
# for i in range(seq_len,len(Tr_scaled)-seq_len):
#     X_test.append(Ts_scaled[i-seq_len:i,0])
#     y_test.append(Ts_scaled[i,0])


# X_test,y_test=np.array(X_test),np.array(y_test)

# X_train=np.reshape(X_train,(X_train.shape[0],X_train.shape[1],1))

# X_test=np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))

# model=Sequential()
# model.add(LSTM(units=50,return_sequences=True,input_shape=(X_train.shape[1],1)))

# model.add(Dropout(0.1))
# model.add(LSTM(units=50,return_sequences=True))
# model.add(Dropout(0.2))
# model.add(tf.keras.layers.GRU(units=50))
# model.add(Dropout(0.2))
# model.add(Dense(units=1))

# model.compile(optimizer='adam',loss=tf.keras.losses.mse)

# model.fit(X_train,y_train,epoch=5,batch_size=32)

# y_hat=model.predict(X_test)

# plt.figure(figsize=(20,10))
# plt.plot(y_test,color='green',label='Ground Truth')
# plt.plot(y_hat,color='red',label='predicted value')
# plt.legend()
# plt.show()




import pandas as pd
import os
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Dropout, GRU

# Load and preprocess data
path_of_file = r"C:\Users\hp\Downloads\WRK.US_H1_txt.txt"

# Check if the file exists
if not os.path.exists(path_of_file):
    raise FileNotFoundError(f"File not found: {path_of_file}")

# Read the dataset
df = pd.read_csv(path_of_file, delimiter=',', usecols=['datetime', 'open', 'close', 'low', 'high'])

# Sort by datetime
df['datetime'] = pd.to_datetime(df['datetime'], errors='coerce')
df = df.dropna(subset=['datetime'])
df = df.sort_values('datetime')

# Visualize the open prices
plt.figure(figsize=(18, 9))
plt.plot(range(df.shape[0]), df['open'], label='Open Price')
plt.xticks(range(0, df.shape[0], 500), df['datetime'].dt.strftime('%Y-%m-%d').loc[::500], rotation=45)
plt.xlabel('Date', fontsize=20)
plt.ylabel('Open Price', fontsize=20)
plt.title('Open Price Over Time', fontsize=25)
plt.legend(fontsize=15)
plt.show()

# Extract open prices
D = df.iloc[:, 1:2].values  # 'open' column

# Split into training and testing sets
train_size = 10000
Tr_set = D[:train_size]
Ts_set = D[train_size:]

# Normalize the data
sc = MinMaxScaler(feature_range=(0, 1))
Tr_scaled = sc.fit_transform(Tr_set)
Ts_scaled = sc.transform(Ts_set)

# Prepare training data
seq_len = 100
X_train, y_train = [], []
for i in range(seq_len, len(Tr_scaled)):
    X_train.append(Tr_scaled[i - seq_len:i, 0])
    y_train.append(Tr_scaled[i, 0])

X_train, y_train = np.array(X_train), np.array(y_train)
X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))  # Reshape for LSTM

# Prepare test data
X_test, y_test = [], []
for i in range(seq_len, len(Ts_scaled)):
    X_test.append(Ts_scaled[i - seq_len:i, 0])
    y_test.append(Ts_scaled[i, 0])

X_test, y_test = np.array(X_test), np.array(y_test)
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))  # Reshape for LSTM

# Build the model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(Dropout(0.1))
model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))
model.add(GRU(units=50))
model.add(Dropout(0.2))
model.add(Dense(units=1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=5, batch_size=32)

# Predict the test set results
y_pred = model.predict(X_test)
y_pred = sc.inverse_transform(y_pred)  # Reverse normalization
y_test_actual = sc.inverse_transform(y_test.reshape(-1, 1))  # Reverse normalization

# Plot actual vs predicted values
plt.figure(figsize=(20, 10))
plt.plot(y_test_actual, color='green', label='Actual Price')
plt.plot(y_pred, color='red', label='Predicted Price')
plt.title('Actual vs Predicted Prices', fontsize=25)
plt.xlabel('Time', fontsize=20)
plt.ylabel('Price', fontsize=20)
plt.legend(fontsize=15)
plt.show()
